/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientWorkArea;

import Business.Enterprise.Enterprise;
import Business.HIS;
import Business.Network.Network;
import Business.Organization.ClinicalDept;
import Business.Organization.Organization;
import Business.Organization.PatientDept;
import Business.ReturnReceipt.MedicineReceipt;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cheny
 */
public class SendmedicalJpanel extends javax.swing.JPanel {

    /**
     * Creates new form SendmedicalJpanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    Organization org;
    UserAccount account;
    HIS system;
    Network network;
   public SendmedicalJpanel(JPanel userProcessContainer, HIS system, Network network,Enterprise enterprise,Organization org,UserAccount account) {
       initComponents();
        Dimension screenSize =Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize);
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.org=org;
        this.account=account;
        this.system=system;
        this.network=network;
        populateTable();
     }
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) ClinicalRecordJTable.getModel();
        model.setRowCount(0);
    for(Network n: system.getNetworkList()){
          for(Enterprise  e: n.getEnterpriseDirectory().getEnterpriseList()){
              //  if (e instanceof Hospitals){
              //System.out.print(e.getEnterpriseType());
               for(Organization o: e.getOrganizationDirectory().getOrganizationList()){
//                  for(UserAccount ua: o.getUserAccountDirectory().getUserAccountList())  {
//                      if(ua.getRole().toString().equals("Doctor")){
               
                if(o instanceof PatientDept){}
                else{
                         System.out.print(o.toString());
            for(MedicineReceipt  mr :o.getMrd().getMedicineReceiptRecordSet()){
                if(mr.getPatientName().getUsername().equals(account.getUsername())){
            //     System.out.print(mr.getDoctorName());
                //ClinicalRecord cwrTemp=cwr.getClinicalrecord();
//                System.out.println(account.getPeople().getName());
//                System.out.println(cwrTemp.getPatientName());
            //  if(cwrTemp.getPatientName().equals(account.getPeople().getName())){
        //   if(cwrTemp.getPatientName().equals(account.getPeople().toString())){
//                  System.out.print("geizhi!");
                if(mr!=null){
                    Object[] row = new Object[7];
                    row[0] = mr;
                    row[1] = mr.getDoctorName();
                    row[2] = mr.getPatientName();
                  
                    row[3] = mr.getMedicine();
                    row[4] = mr.getQuantity();
                    row[5] = mr.getMedicinestatus();
                    row[6]=mr.getMoney();
                    
                    model.addRow(row);}}
                }}}}}}
//}
    //}
     //  }
//                }}}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ClinicalRecordJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(224, 224, 224));
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        ClinicalRecordJTable.setBackground(new java.awt.Color(224, 224, 224));
        ClinicalRecordJTable.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ClinicalRecordJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "HospitalName", "DoctorName", "PatientName", "Medicine", "Quantity", "Medicine status", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ClinicalRecordJTable.setGridColor(new java.awt.Color(0, 0, 0));
        ClinicalRecordJTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        ClinicalRecordJTable.setSelectionForeground(new java.awt.Color(255, 255, 0));
        jScrollPane1.setViewportView(ClinicalRecordJTable);

        jButton1.setBackground(new java.awt.Color(224, 224, 224));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setText("Send to medical insurance");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(224, 224, 224));
        backJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(224, 224, 224));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Hospital Information System - SendMedical");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(backJButton)
                                .addComponent(jButton1)))))
                .addContainerGap(680, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jButton1)
                .addGap(30, 30, 30)
                .addComponent(backJButton)
                .addContainerGap(574, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
           int selectedrow=ClinicalRecordJTable.getSelectedRow();
        if(selectedrow>=0){
            MedicineReceipt cr =(MedicineReceipt)ClinicalRecordJTable.getValueAt(selectedrow,0);
            if(cr.getMedicinestatus().equals("request"))
            {
                  JOptionPane.showMessageDialog(null,"already requested");
            }
            else{
            String HospitalName=cr.getHospitalName();
            UserAccount DoctorName=cr.getDoctorName();
            UserAccount PatientName=cr.getPatientName();
            String Medicine=cr.getMedicine();
            int Quantity=cr.getQuantity();
            int money =cr.getMoney();
            cr.setMedicinestatus("request");
           org.getMrd().AddaMedicineReceiptRecord(HospitalName, DoctorName, PatientName, Medicine, Quantity, money, "request");
            JOptionPane.showMessageDialog(null,"Succeed");
            populateTable();
            }
            
        }
         else{
        JOptionPane.showMessageDialog(null,"please select one row");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ClinicalRecordJTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
