/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorWorkArea;

import Business.Enterprise.Enterprise;
import Business.HIS;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Reservation.reservationtime;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ReservationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yizhe
 */
public class viewreservation extends javax.swing.JPanel {

    UserAccount SelectedPatientAccount;
    JPanel userProcessContainer;
    Enterprise enterprise;
    Organization org;
    UserAccount account;
    HIS system;
    ArrayList<UserAccount> patientAccountList;
    public  viewreservation(JPanel userProcessContainer, Enterprise enterprise,Organization org,UserAccount account,HIS system) {
        initComponents();
        Dimension screenSize =Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize);
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.org=org;
        this.account=account;
        this.system=system;
        patientAccountList=new ArrayList<>();
        findPatientAccount();
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReservationJTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DateJDP = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        TimeJCB = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        reservedBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        accept = new javax.swing.JButton();
        decline = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        timeJTF = new javax.swing.JTextField();
        submitJButton4 = new javax.swing.JButton();
        pending = new javax.swing.JButton();
        cancelJB = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        enter = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        patientJTF = new javax.swing.JTextField();

        setBackground(new java.awt.Color(224, 224, 224));
        setMinimumSize(new java.awt.Dimension(1920, 1080));
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        jLabel3.setBackground(new java.awt.Color(224, 224, 224));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Hospital Information System - Doctor WorkArea / View Reservation ");

        jScrollPane1.setBackground(new java.awt.Color(224, 224, 224));
        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));

        ReservationJTable.setBackground(new java.awt.Color(224, 224, 224));
        ReservationJTable.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ReservationJTable.setForeground(new java.awt.Color(0, 0, 0));
        ReservationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Hospital", "Doctor", "Date", "TimePeriod", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReservationJTable.setGridColor(new java.awt.Color(0, 0, 0));
        ReservationJTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        ReservationJTable.setSelectionForeground(new java.awt.Color(255, 255, 0));
        ReservationJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReservationJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ReservationJTable);

        jLabel4.setBackground(new java.awt.Color(224, 224, 224));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Set Available Reservation Time:");

        jLabel1.setBackground(new java.awt.Color(224, 224, 224));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Choose Date");

        DateJDP.setForeground(new java.awt.Color(0, 0, 0));
        DateJDP.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        DateJDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateJDPActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(224, 224, 224));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Choose Time Period");

        TimeJCB.setBackground(new java.awt.Color(224, 224, 224));
        TimeJCB.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        TimeJCB.setForeground(new java.awt.Color(0, 0, 0));
        TimeJCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Morning(9:00-12:00)", "Afternoon(12:00-15:00)", "Afternoon(15:00-18:00)", "All Time Period" }));

        submitJButton.setBackground(new java.awt.Color(224, 224, 224));
        submitJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        submitJButton.setForeground(new java.awt.Color(0, 0, 0));
        submitJButton.setText("Save");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        reservedBtn.setBackground(new java.awt.Color(224, 224, 224));
        reservedBtn.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        reservedBtn.setForeground(new java.awt.Color(0, 0, 0));
        reservedBtn.setText("Only View Reserved");
        reservedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservedBtnActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(224, 224, 224));
        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Accept / Decline Reservation:");

        accept.setBackground(new java.awt.Color(224, 224, 224));
        accept.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        accept.setForeground(new java.awt.Color(0, 0, 0));
        accept.setText("Accept");
        accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });

        decline.setBackground(new java.awt.Color(224, 224, 224));
        decline.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        decline.setForeground(new java.awt.Color(0, 0, 0));
        decline.setText("Decline");
        decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(224, 224, 224));
        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("The Time You Choose");

        timeJTF.setBackground(new java.awt.Color(224, 224, 224));
        timeJTF.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        timeJTF.setForeground(new java.awt.Color(0, 0, 0));
        timeJTF.setCaretColor(new java.awt.Color(255, 255, 255));

        submitJButton4.setBackground(new java.awt.Color(224, 224, 224));
        submitJButton4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        submitJButton4.setForeground(new java.awt.Color(0, 0, 0));
        submitJButton4.setText("Refresh");
        submitJButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButton4ActionPerformed(evt);
            }
        });

        pending.setBackground(new java.awt.Color(224, 224, 224));
        pending.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        pending.setForeground(new java.awt.Color(0, 0, 0));
        pending.setText("Pending");
        pending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingActionPerformed(evt);
            }
        });

        cancelJB.setBackground(new java.awt.Color(224, 224, 224));
        cancelJB.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        cancelJB.setForeground(new java.awt.Color(0, 0, 0));
        cancelJB.setText("Cancel");
        cancelJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJBActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(224, 224, 224));
        backJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backJButton.setForeground(new java.awt.Color(0, 0, 0));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(224, 224, 224));
        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Enter clinical case:");

        enter.setBackground(new java.awt.Color(224, 224, 224));
        enter.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        enter.setForeground(new java.awt.Color(0, 0, 0));
        enter.setText("Enter");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(224, 224, 224));
        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Current patient is");

        patientJTF.setEditable(false);
        patientJTF.setBackground(new java.awt.Color(224, 224, 224));
        patientJTF.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        patientJTF.setForeground(new java.awt.Color(0, 0, 0));
        patientJTF.setCaretColor(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(submitJButton4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(reservedBtn))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(backJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(TimeJCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(DateJDP, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(patientJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(timeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(accept, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(pending)
                                        .addGap(18, 18, 18)
                                        .addComponent(decline, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(submitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cancelJB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(750, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservedBtn)
                    .addComponent(submitJButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(backJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DateJDP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(TimeJCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelJB)
                        .addComponent(submitJButton)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(accept)
                        .addComponent(pending)
                        .addComponent(decline))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(timeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(patientJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enter))
                .addContainerGap(229, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void findPatientAccount(){
        
        for(Network n:system.getNetworkList()){
            for(Enterprise e:n.getEnterpriseDirectory().getEnterpriseList()){
                for(Organization o:e.getOrganizationDirectory().getOrganizationList()){
                    for(UserAccount ua:o.getUserAccountDirectory().getUserAccountList()){
                        
                        if(ua.getRole() instanceof PatientRole){
                            patientAccountList.add(ua);
                            
                        }
                    }
                }
            }
        }
        
    }
    public void populateTable(){
        
        DefaultTableModel model = (DefaultTableModel) ReservationJTable.getModel();
        model.setRowCount(0);
        
            for (reservationtime rt : org.getRtd().getReservationtimeSet()) {
                if(rt!=null&& rt.getDoctor()==account){
                    Object[] row = new Object[7];
                    row[0] = rt;
                    row[1] = rt.getDoctor().getPeople();
                        Date date=rt.getDate();
                        SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
                        String s = sdf.format(date);
                    row[2] = s;
                    row[3] = rt.getTimePeriod();
                    row[4] = rt.getStatus();
//                    row[5] = rt.getPatientName();
//                    row[6] = rt.getRemark();

                    model.addRow(row);
                }
            }
    }
    
    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
      
        Date date=DateJDP.getDate();
        String timeperiod=TimeJCB.getSelectedItem().toString();
        UserAccount ua=account;
        String m="Morning(9:00-12:00)";
        String a1="Afternoon(12:00-15:00)";
        String a2="Afternoon(15:00-18:00)";
        if(timeperiod.equals("All Time Period")){
            org.getRtd().AddReservationTime(enterprise.getName(),ua, date, m, null,null,null);
            org.getRtd().AddReservationTime(enterprise.getName(),ua, date, a1, null,null,null);
            org.getRtd().AddReservationTime(enterprise.getName(),ua, date, a2, null,null,null);
        }else{
            org.getRtd().AddReservationTime(enterprise.getName(),ua, date, timeperiod, null,null,null);
        }
        populateTable();
        
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void reservedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservedBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) ReservationJTable.getModel();
        model.setRowCount(0);
        
            for (reservationtime rt : org.getRtd().getReservationtimeSet()) {
                if(!rt.getStatus().isEmpty()){
                    Object[] row = new Object[7];
                    row[0] = rt;
                    row[1] = rt.getDoctor().getPeople();
                    row[2] = rt.getDate();
                    row[3] = rt.getTimePeriod();
                    row[4] = rt.getStatus();
//                    row[5] = rt.getPatientName();
//                    row[6] = rt.getRemark();
                    
                    model.addRow(row);
                }
            }
    }//GEN-LAST:event_reservedBtnActionPerformed

    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed
        // TODO add your handling code here:
        int selectedrow=ReservationJTable.getSelectedRow();
        if(selectedrow>=0){
            reservationtime rt =(reservationtime)ReservationJTable.getValueAt(selectedrow,0);
            rt.setStatus("Accept");
            populateTable();
        }
    }//GEN-LAST:event_acceptActionPerformed

    private void declineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineActionPerformed
        // TODO add your handling code here:
        int selectedrow=ReservationJTable.getSelectedRow();
        if(selectedrow>=0){
            reservationtime rt =(reservationtime)ReservationJTable.getValueAt(selectedrow,0);
            rt.setStatus("Decline");
            populateTable();
        }
    }//GEN-LAST:event_declineActionPerformed

    private void submitJButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButton4ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_submitJButton4ActionPerformed

    private void pendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingActionPerformed
        // TODO add your handling code here:
        int selectedrow=ReservationJTable.getSelectedRow();
        if(selectedrow>=0){
            reservationtime rt =(reservationtime)ReservationJTable.getValueAt(selectedrow,0);
            rt.setStatus("Pending");
            populateTable();
        }
    }//GEN-LAST:event_pendingActionPerformed

    private void cancelJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJBActionPerformed
        // TODO add your handling code here:
        int selectedrow=ReservationJTable.getSelectedRow();
        if(selectedrow>=0){
            reservationtime rt =(reservationtime)ReservationJTable.getValueAt(selectedrow,0);
            org.getRtd().deletereservationtime(rt);
            JOptionPane.showMessageDialog(null,"cancel successfully");
            populateTable();
        }
        
    }//GEN-LAST:event_cancelJBActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
        // TODO add your handling code here:
        int selectedrow=ReservationJTable.getSelectedRow();
        if(selectedrow>=0){
            reservationtime rt =(reservationtime)ReservationJTable.getValueAt(selectedrow,0);
            if(rt.getStatus().equals("Accept")){
                String hospitalName=rt.getHospital();
                UserAccount doctorName=rt.getDoctor();
                UserAccount patientAccount=SelectedPatientAccount;
                clinicalhistory mojp=new clinicalhistory(userProcessContainer,enterprise,hospitalName,doctorName,patientAccount,account,org);
                userProcessContainer.add(mojp);
                CardLayout ly=(CardLayout)userProcessContainer.getLayout();
                ly.next(userProcessContainer);
            }else{
                JOptionPane.showMessageDialog(null,"Please accept first");
            }
        }
        
    }//GEN-LAST:event_enterActionPerformed

    private void ReservationJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReservationJTableMouseClicked
        // TODO add your handling code here:
        int selectedrow=ReservationJTable.getSelectedRow();
        if(selectedrow>=0){
            reservationtime rt =(reservationtime)ReservationJTable.getValueAt(selectedrow,0);
            Date date=rt.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
            String s = sdf.format(date);
            
            timeJTF.setText(s+" "+rt.getTimePeriod());
            findPatientName(rt);
        }
    }//GEN-LAST:event_ReservationJTableMouseClicked

    public void findPatientName(reservationtime selectedrt){
        
        for(UserAccount ua:patientAccountList){
            
            for(WorkRequest wr:ua.getWorkQueue().getWorkRequestList()){
                
                ReservationWorkRequest rwr=(ReservationWorkRequest)wr;
                
                if(rwr.getRt()==selectedrt){
                    patientJTF.setText(rwr.getSender().getPeople().getName());
                    SelectedPatientAccount=rwr.getSender();
                }
            }
        }
    }
    private void DateJDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateJDPActionPerformed
        // TODO add your handling code here:
        if(DateJDP.getDate().before(new Date())){
            JOptionPane.showMessageDialog(null,"please choose right date(time after today)");
            DateJDP.setDate(null);
        }
    }//GEN-LAST:event_DateJDPActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker DateJDP;
    private javax.swing.JTable ReservationJTable;
    private javax.swing.JComboBox TimeJCB;
    private javax.swing.JButton accept;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton cancelJB;
    private javax.swing.JButton decline;
    private javax.swing.JButton enter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patientJTF;
    private javax.swing.JButton pending;
    private javax.swing.JButton reservedBtn;
    private javax.swing.JButton submitJButton;
    private javax.swing.JButton submitJButton4;
    private javax.swing.JTextField timeJTF;
    // End of variables declaration//GEN-END:variables
}
