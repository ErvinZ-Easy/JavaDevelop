/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PharmacistWorkArea;

import Business.Clinical.ClinicalRecord;
import Business.Enterprise.Enterprise;
import Business.HIS;
import Business.Network.Network;
import Business.Organization.FinancialDept;
import Business.Organization.Organization;
import Business.Organization.PatientDept;
import Business.UserAccount.UserAccount;
import Business.Patientaskmedicine.askformedicine;
import Business.ReturnReceipt.MedicineReceipt;
import Business.WorkQueue.ClinicalWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cheny
 */
public class givemedicine extends javax.swing.JPanel {

    /**
     * Creates new form givemedicine
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    Network network;
    UserAccount useraccount;
    HIS system;
    Organization o;
    public givemedicine(JPanel userProcessContainer, HIS system, Network network,Enterprise enterprise,Organization org,UserAccount account) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.useraccount=useraccount;
        this.system=system;
        this.o=org;
 // System.out.print(o.toString());
   populate();
    }
 public void populate()
 {
     DefaultTableModel model = (DefaultTableModel) ClinicalRecordJTable.getModel();
        model.setRowCount(0);
        for (Network n : system.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                for(Organization o:e.getOrganizationDirectory().getOrganizationList())
            
                    if (o instanceof PatientDept){
                      for(askformedicine a  : o.getAfd().getaskformedicineRecordSet()){
                          if(a.getMedicinestatus().equals("waiting")){
                     Object[] row = new Object[6];
                    row[0] = a;
                    row[1] = a.getDoctorName();
                    row[2] = a.getPatientName();
                    
                    row[3] = a.getMedicine();
                    row[4] = a.getQuantity();
                    row[5] = a.getMedicinestatus();
                    model.addRow(row);
                      }}
            }
            }}
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ClinicalRecordJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(224, 224, 224));
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        ClinicalRecordJTable.setBackground(new java.awt.Color(224, 224, 224));
        ClinicalRecordJTable.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ClinicalRecordJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "HospitalName", "DoctorName", "PatientName", "Medicine", "Quantity", "Whetherhave medicine"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ClinicalRecordJTable.setGridColor(new java.awt.Color(0, 0, 0));
        ClinicalRecordJTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        ClinicalRecordJTable.setSelectionForeground(new java.awt.Color(255, 255, 0));
        jScrollPane1.setViewportView(ClinicalRecordJTable);

        jButton1.setBackground(new java.awt.Color(224, 224, 224));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setText("GIVE MEDICINE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(224, 224, 224));
        backJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(224, 224, 224));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Hospital Information System - GiveMedicine");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addContainerGap(530, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(backJButton)
                .addContainerGap(587, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int selectedrow=ClinicalRecordJTable.getSelectedRow();
        if(selectedrow>=0){
            askformedicine cr =(askformedicine)ClinicalRecordJTable.getValueAt(selectedrow,0);
            String HospitalName=cr.getHospitalName();
            UserAccount DoctorName=cr.getPatientName();
            UserAccount PatientName=cr.getPatientName();
            String Medicine=cr.getMedicine();
            int Quantity=cr.getQuantity();
                        for(Organization or : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(or instanceof FinancialDept){
                            HashMap<String,Integer> map1=enterprise.getStorageDir().getStorageDirectory();
                            if(!map1.containsKey(Medicine)){
                                  JOptionPane.showMessageDialog(null,"this medicine does not exist");
                            }
                             for(Map.Entry<String,Integer> entry:map1.entrySet()){
                                    if(entry.getKey().equals(Medicine)){
                                        if(entry.getValue()>=Quantity){
                                        map1.put(Medicine, map1.get(Medicine)-Quantity);
                                        cr.setMedicinestatus("already giving");
                                            MedicineReceipt mr=o.getMrd().AddaMedicineReceiptRecord(HospitalName, DoctorName, PatientName, Medicine, Quantity, Quantity*26, "process");
                                           JOptionPane.showMessageDialog(null,"give out");
                                    }
                                    else{
                                        JOptionPane.showMessageDialog(null,"out of stock");
                                    }
                                    }
                                   
                            }
                        }
                    }
           
              populate();
            //askformedicine af=o.getAfd().AddaskformedicineRecord(HospitalName, DoctorName, PatientName, Medicine, Quantity, "already giving");
            
         
          
        }
         else{
        JOptionPane.showMessageDialog(null,"please select one row");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    
    public void changeStatus(){
        int selectedrow=ClinicalRecordJTable.getSelectedRow();
        if(selectedrow>=0){
            askformedicine cr =(askformedicine)ClinicalRecordJTable.getValueAt(selectedrow,0);
            UserAccount PatientName=cr.getPatientName();
            
            for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    for(Organization o: e.getOrganizationDirectory().getOrganizationList()){
                        for(UserAccount ua: o.getUserAccountDirectory().getUserAccountList()){
                            if(ua.getRole().toString().equals("Doctor")&&ua.equals(PatientName)){
                                for(WorkRequest wr:ua.getWorkQueue().getWorkRequestList()){
                                    ClinicalWorkRequest cwr=(ClinicalWorkRequest) wr;
                                    ClinicalRecord cwrTemp=cwr.getClinicalrecord();
                                    cwrTemp.setStatus("already giving");
                                }
                            }
                        }
                    }
                }
            }
        }   
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ClinicalRecordJTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
